<?php

namespace App\Http\Controllers;

use ZipArchive;
use App\Models\Project;
use App\Models\Campaign;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use SimpleSoftwareIO\QrCode\Facades\QrCode;
use File;

class QrController extends Controller
{
    //
    public function index(Project $project)
    {
        // dd(date('dmY-h:i:s'));
        // $campaigns = Campaign::get();
        $campaigns = $project->campaigns()->paginate(50);
        $qrPath = '/storage/campaign/';
        $domainUrl = config('app.url');
        // dd($domainUrl);

        return view('qr-codes', compact('project', 'campaigns', 'qrPath', 'domainUrl'));
    }

    public function formProcess(Project $project, Request $request)
    {
        $domainUrl = config('app.url');
        // Unique Id
        $randomid = $this->generateBarcodeNumber();
        $target = $request->input('qr_type') == 'url' ? $request->input('target_url') : $request->input('target_code');
        $data = [
            'title' => $request->input('title'),
            'type' => $request->input('qr_type'),
            'qrcode' => 'test',
            'link' => $randomid,
            'target' => $target,
            'status' => $request->input('status')
        ];
        $campaign = $project->campaigns()->create($data);

        // $directory = '../public/files/offer/'.$campaign->id;
        // $destinationPath = $directory."/";
        // $this->checkDir($directory, $campaign->id);

        $logo = QrCode::format('png')
            ->merge('img/QRcode.png', 0.1, true)
            ->size(200)->errorCorrection('H')
            ->generate($domainUrl . $campaign->link);
        // $qrName = time() . '.png';
        // $qrName = $data['title'] . '.png';
        $qrName = $data['title'] . '-' . date('dmY-h:i:s') . '.png';
        $output_file = 'public/campaign/' . str_replace(' ', '_', $project->name) . '/' . str_replace(' ', '_', $qrName);
        Storage::disk('local')->put($output_file, $logo);

        if ($campaign) {
            Campaign::where('id', '=', $campaign->id)->update(['qrcode' => $qrName]);
            return redirect()->route('qr-codes.index', $project);
        }
    }

    public function multiple_store(Project $project, Request $request)
    {
        // uploading the file
        $uploadedFile = $request->file('file');
        $filename = time() . $uploadedFile->getClientOriginalName();

        Storage::disk('local')->putFileAs(
            'files/multiple_qr/' . str_replace(' ', '_', $project->name),
            $uploadedFile,
            $filename
        );
        // read the file
        $filepath = storage_path() . '/app/files/multiple_qr/' . str_replace(' ', '_', $project->name) . '/' . $filename;
        $qrs = [];
        if (($open = fopen($filepath, 'r')) !== FALSE) {
            while (($data = fgetcsv($open, 10000, ",")) !== FALSE) {
                $qrs[] = $data;
            }
            fclose($open);
        }
        // operations on each entry
        $domainUrl = config('app.url');
        $data = array();
        $qr_type = $request->input('qr_type');
        // dd($qrs);
        // $qrArr = array();
        foreach ($qrs as $key => $qr) {
            // $qrArr[] = $qr;
            // $qrName = time() . '.png';
            $qrName = $qr[0] . '-' . date('dmY-h:i:s-') . $key . '.png';
            // // Unique Id
            $randomid = $this->generateBarcodeNumber();
            $data[] = [
                'title' => $qr[0],
                'type' => $qr_type,
                'qrcode' => $qrName,
                'link' => $randomid,
                'target' => $qr[1],
                'status' => 1
            ];
        }
        // dd($data);
        // $campaign = $project->campaigns()->createMany($data)->toArray();
        $campaign = $project->campaigns()->createMany($data);
        // $camps = array();
        // dd($campaign[1]['qrcode']);
        foreach ($campaign as $key => $camp) {
            $target = $qr_type == 'Code' ? $camp['target'] : $domainUrl . $camp['link'];
            // $camps[] = $camp;
            // dd($camp);
            // QR creation in png
            $logo = QrCode::format('png')
                ->merge('img/QRcode.png', 0.1, true)
                ->size(200)->errorCorrection('H')
                ->generate($target);
            // $output_file = 'public/campaign/img/' . str_replace(' ', '_', $project->name) . '/' . str_replace(' ', '_', $camp['qrcode']) . '/';
            // $output_file = 'public/campaign/img/' . str_replace(' ', '_', $project->name) . '/' . str_replace(' ', '_', $camp['qrcode']);

            $output_file = 'public/campaign/' . str_replace(' ', '_', $project->name) . '/' . '/' . str_replace(' ', '_', $camp['qrcode']);
            // dd($output_file);
            Storage::disk('local')->put($output_file, $logo);
            // Storage::disk('local')->putFileAs($output_file, $logo, str_replace(' ', '_', $camp['qrcode']));
        }
        // dd($campaign);
        // dd($campaign[$key]->id);
        // $directory = '../public/files/offer/'.$campaign->id;
        // $destinationPath = $directory."/";
        // $this->checkDir($directory, $campaign->id);
        // if ($campaign) {
        //     Campaign::where(
        //         'id',
        //         '=',
        //         $campaign->id
        //     )->update(['qrcode' => $qrName]);

        return redirect()->route('qr-codes.index', $project);
        // }
        // insert entries in db
        // return to same page with message
    }

    public function multiple_download(Request $request)
    {
        // dd('hello');
        $project_name = str_replace(' ', '_', $request->input('project'));
        $qrIDs = $request->input('qrIDs');
        $campaigns = Campaign::whereIn('id', $qrIDs)->get();
        // dd($campaigns[0]->qrcode);
        // return response($qrIds, '200');
        // copy all files to a folder that needs to be downloaded
        Storage::deleteDirectory('public/download/' . $project_name);
        foreach ($campaigns as $campaign) {
            Storage::copy('public/campaign/' . $project_name . '/' . str_replace(' ', '_', $campaign->qrcode), 'public/download/' . $project_name . '/' . str_replace(' ', '_', $campaign->qrcode));
        }
        // return response()->json($campaigns);
        $zip = new ZipArchive;
        $fileName = $project_name . time() . '.zip';
        if ($zip->open(public_path('/storage/download/' . $fileName), ZipArchive::CREATE) === TRUE) {
            $files = File::files(public_path('/storage/download/' . $project_name));
            foreach ($files as $key => $value) {
                $relativeName = basename($value);
                $zip->addFile($value, $relativeName);
            }
            $zip->close();
            // dd($files);
        }
        Storage::deleteDirectory('public/download/' . $project_name);
        $zipFilePath = public_path('/storage/download/' . $fileName);
        $response = [
            'message' => 'Downloading zip file',
            'file_url' => $zipFilePath,
        ];
        return response()->download($zipFilePath);
        // return response()->download($zipFilePath);
        // Storage::download(public_path('/storage/download/'), $fileName);
    }
    public function update(Request $request, Campaign $campaign)
    {
        // dd($campaign);
        $this->validate($request, [
            'title' => 'required',
            'qr_type' => 'required',
            'status' => 'required',
        ]);
        if ($request->qr_type == 'url') {
            $target = $request->input('target_url');
        } else {
            $target = $request->input('target_code');
        }
        // $campaign->title = $request->input('title');
        // $campaign->type = $request->input('qr_type');
        // $campaign->target = $target;
        // $campaign->status = $request->input('status');
        // $campaign->save();

        $updation = $campaign->update([
            'title' => $request->title,
            'type' => $request->qr_type,
            'status' => $request->status,
            'target' => $target,
        ]);
        // if ($updation) {
        //     return response()->json([
        //         'message' => 'Campaign updated successfully',
        //         'status' => 'success',
        //     ]);
        // } else {
        //     return response()->json([
        //         'message' => 'Campaign not updated',
        //         'status' => 'error',
        //     ]);
        // }
        return back()->with('success', 'QR Code updated successfully');
    }


    // helper functions

    /*
    * Generate Unique Id
    *
    */
    public function generateBarcodeNumber()
    {

        $number = Str::random(8);

        // call the same function if the exists already
        if ($this->barcodeNumberExists($number)) {
            return $this->generateBarcodeNumber();
        }

        // otherwise, it's valid and can be used
        return $number;
    }

    /*
    * Check Unique Id
    *
    */
    public function barcodeNumberExists($number)
    {
        return Campaign::where('link', $number)->exists();
    }

    /*
     * check Directory
    */
    public  function checkDir($directory, $id)
    {
        if (!file_exists($directory)) {
            mkdir($directory, 0777, true);
        }
    }
}
